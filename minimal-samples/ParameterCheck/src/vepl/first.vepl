package vepl

trait Side {
	right : Boolean
}

atomicEvent FIRST with Side

atomicEvent SECOND with Side

atomicEvent THIRD (foo: Integer) with Side


complexEvent SIDE_TEST(s: Boolean) {
	as FIRST(s) -> SECOND(s)
}

complexEvent TRICKY_TEST(s: Boolean, foo: Integer) {
	as SECOND(s) -> THIRD(foo, s)
}

complexEvent HIGHER_ORDER_TEST(side: Boolean, bar: Integer) {
	as FIRST(side) -> TRICKY_TEST(side, bar)
}

rule sideTestRule on SIDE_TEST {
	System.out.println("SIDE TEST OK!")
	
	val bindings = ruleInstance.atom.parameterTable.parameterBindings
	bindings.forEach[System.out.println('\t' + symbolicName + "\t= " + value)]
}

rule SecondRule on SECOND {
	System.out.println("SecondRule fires for SECOND opaque Event")
	
	val bindings = ruleInstance.atom.parameterTable.parameterBindings
	bindings.forEach[System.out.println('\t' + symbolicName + "\t= " + value)]
}

rule ThirdRule on THIRD {
	System.out.println("ThirdRule fires for THIRD opaque Event")
	
	val bindings = ruleInstance.atom.parameterTable.parameterBindings
	bindings.forEach[System.out.println('\t' + symbolicName + "\t= " + value)]
}

rule TrickyRule on TRICKY_TEST {
	System.out.println("TrickyRule fires for TRICKY_TEST complex Event")
	
	val bindings = ruleInstance.atom.parameterTable.parameterBindings
	bindings.forEach[System.out.println('\t' + symbolicName + "\t= " + value)]
}

rule HigherOrderPatternRule on HIGHER_ORDER_TEST {
	System.out.println("HigherOrderPatternRule fires for HIGHER_ORDER_TEST complex Event")
	
	val bindings = ruleInstance.atom.parameterTable.parameterBindings
	bindings.forEach[System.out.println('\t' + symbolicName + "\t= " + value)]
}
		